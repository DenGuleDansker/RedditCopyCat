@page "/thread"
@inject HttpClient Http
@using backend.Data
@using Model
@using Microsoft.AspNetCore.WebUtilities
@inject IJSRuntime JSRuntime
@inject ApiService apiService
@inject NavigationManager NavigationManager
@inject NavigationManager Navigation

<script>
    //JavaScript til at disble knapper på en post/comment efter der er up- eller ned votet
    function toggleButtonsTopic(ID) {
        const buttonup = document.getElementById('up_' + ID);
        const buttondwn = document.getElementById('dwn_' + ID);
        buttonup.disabled = true;
        buttondwn.disabled = true;
    }

    function toggleButtonsComment(ID) {
        const cbuttonup = document.getElementById('cup_' + ID);
        const cbuttondwn = document.getElementById('cdwn_' + ID);
        cbuttonup.disabled = true;
        cbuttondwn.disabled = true;
    }
</script>

<div class="maincontainer">
    <div class="content">
        <h2>@(topic?.Title)</h2>
        @if (@topic != null && @topic.Description.Contains("https:") || @topic != null && @topic.Description.ToString().Contains("http:"))
        {
            <p><a href="@topic.Description" target="_blank">@topic.Description</a></p>
        }
        else if (@topic != null && @topic.Description.ToString().Contains("www."))
        {
            <p><a href="//@topic.Description" target="_blank">@topic.Description</a></p>
        }
        else
        {
            <p>@(topic?.Description)</p>
        }
    </div>
    <div class="addvote">
        <button id="up_@(topic?.TopicID)" @onclick="() => UpvoteTopic((int)topic.TopicID)">Upvote</button>
        <button class="lftbtn" id="dwn_@(topic?.TopicID)" @onclick="() => DownvoteTopic((int)topic.TopicID)">Downvote</button>
    </div>
    <div class="metapost">
        <div class="votes">
            <p>Votes: @(topic?.Votes)</p>
        </div>
        <div class="date">
            <p>Date: @(topic?.Date)</p>
        </div>
        <div class="user">
            <p>Posted by: @(topic?.User)</p>
        </div>
    </div>
</div>

<div class="dividertitle">
<h3>Kommentarer</h3>
</div>

<div class="commentcontainer">

    @if (comments != null)
    {
        <div class="comment-section">
            @foreach (var comment in comments)
            {
                <div class="comment">
                    <div class="commentcontent">
                        <p>@comment.Description</p>
                    </div>
                    <div class="comment-votes">
                        <button id="cup_@comment.CommentID" @onclick="() => UpvoteComment((int)topic.TopicID, (int)comment.CommentID)">Upvote</button>
                        <button class="lftbtn" id="cdwn_@comment.CommentID" @onclick="() => DownvoteComment((int)topic.TopicID, (int)comment.CommentID)">Downvote</button>
                    </div>
                    <div class="metapost">
                        <div class="votes">
                            <p>Votes: @comment.Votes</p>
                        </div>
                        <div class="date">
                            <p>Date: @comment.Date</p>
                        </div>
                        <div class="user">
                            <p>Posted by: @comment.User</p>
                        </div>
                    </div>

                </div>
            }
        </div>
    } else
    {
        <p>Der er ingen kommentarer på denne topic endni :(</p>
    }

</div>
<div class="center">
    <h4>Tilføj kommentar til denne tråd</h4>
    <EditForm Model="newComment" OnValidSubmit="CreateComment">

        <div class="input-group mb-3">
            <InputText @bind-Value="newComment.Description" class="form-control" placeholder="Hvad har du på hjertet?" aria-label="Description" aria-describedby="basic-addon1" />
        </div>

        <div class="input-group mb-3">
            <InputText @bind-Value="newComment.User" class="form-control" placeholder="Brugernavn" aria-label="User" aria-describedby="basic-addon1" />
        </div>

        <button type="submit" class="btn btn-success mb-2">Post</button>
    </EditForm>
</div>

@code {

    int threadID;

    private Topic? topic;
    private Comment? newComment = new Comment();

    private Comment[]? comments;

    protected override void OnInitialized()
    {
        // Get the current URI
        var uri = new Uri(Navigation.Uri);

        // Parse the query string
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Retrieve the 'id' parameter
        if (query.TryGetValue("id", out var idValue))
        {
            threadID = Int32.Parse(idValue); // Finder threadID fra URL som string og gemmer den som integer
        }
    }
    protected override async Task OnInitializedAsync()
    {
        topic = await apiService.GetTopic(threadID);
        comments = await apiService.GetComments(threadID);
    }

    private async void UpvoteTopic(int id)
    {
        var updatedPost = await apiService.UpvoteTopic(id);

        topic = await apiService.GetTopic(id);
        await JSRuntime.InvokeVoidAsync("toggleButtonsTopic", id); //kører JS funktionen togglebuttons

        StateHasChanged();
    }

    private async void DownvoteTopic(int id)
    {
        var updatedDownPost = await apiService.DownvoteTopic(id);
        await JSRuntime.InvokeVoidAsync("toggleButtonsTopic", id); //kører JS funktionen togglebuttons

        topic = await apiService.GetTopic(id);

        StateHasChanged();
    }

    private async void UpvoteComment(int id, int topicid)
    {
        var updatedPost = await apiService.UpvoteComment(id, topicid);

        await JSRuntime.InvokeVoidAsync("toggleButtonsComment", topicid); //kører JS funktionen togglebuttons

        comments = await apiService.GetComments(id);

        StateHasChanged();
    }

    private async void DownvoteComment(int id, int topicid)
    {
        var updatedDownPost = await apiService.DownvoteComment(id, topicid);

        await JSRuntime.InvokeVoidAsync("toggleButtonsComment", topicid); //kører JS funktionen togglebuttons

        comments = await apiService.GetComments(id);

        StateHasChanged();
    }

    private async Task CreateComment()
    {
        await apiService.CreateComment(newComment.Description, threadID, newComment.User);

        // Clear the form by creating a new empty Topic.
        newComment = new Comment();

        comments = await apiService.GetComments(threadID);
    }
}

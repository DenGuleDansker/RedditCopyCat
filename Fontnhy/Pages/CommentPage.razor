@page "/topic"
@inject HttpClient Http
@using backend.Data
@using Model
@inject ApiService apiService

@inject NavigationManager NavigationManager
{
<table>
    <tr>
        <th>Kommentar</th>
        <th>Navn</th>
        <th>Dato</th>
    </tr>
    @foreach (var comment in comments)
    {
        <tr>
            <!--
                These a href links will match the route in the page 'PostItem.razor'.
                The route is defined as "/post/{id}" and the id is the post id.
            -->
            <td>@comment.Description</td>
            <td>@comment.User</td>
            <td>@comment.Date</td>
            @*<td>@(post.Upvotes - post.Downvotes)</td>*@
            @*<td><button @onclick="() => Upvote(post.Id)">Upvote</button></td>
                <td><button @onclick="() => Downvote(post.Id)">Downvote</button></td>*@
        </tr>
    }
</table>

<br />
}

<div>
    <br />
    <h4>Skriv en kommentar</h4>
    <input placeholder="Content" type="input" id="content" />
    <input placeholder="Name" type="input" id="content" />
    <button id="createPostButton" type="button">Post comment</button>
</div>

@code {
    [Parameter]
    public int PostId { get; set; }
    private Comment[]? comments;

    protected override async Task OnInitializedAsync()
    {
        comments = await apiService.GetComments(PostId);
    }
    // PostId is passed in from the parent component. See how in PostItem.razor.

    //private Post? votePost;



    //private string? content;
    //private async void CreateNewComment()
    //{
    //    //if (content == null)
    //    //{
    //    //    return;
    //    //}
    //    // TODO: Provide list of users from dropdown, or maybe just convert
    //    // from username to UserId
    //    // await apiService.CreateComment(content, PostId, 2); // UserId: 2
    //}
}


@page "/"
@inherits LayoutComponentBase

@using Model
@using backend.Data
@inject ApiService apiService

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime


<script>
    //JavaScript til at disble knapper på en post efter der er up- eller ned votet
    function toggleButtonsTopic(ID) {
        const buttonup = document.getElementById('up_' + ID);
        const buttondwn = document.getElementById('dwn_' + ID);
        buttonup.disabled = true;
        buttondwn.disabled = true;
    }

    function toggleButtonsComment(ID) {
        const cbuttonup = document.getElementById('cup_' + ID);
        const cbuttondwn = document.getElementById('cdwn_' + ID);
        cbuttonup.disabled = true;
        cbuttondwn.disabled = true;
    }
</script>

<h1>Welcome to RedditCopyCat</h1>
<h3><a href="https://localhost:7048/create-topic">Create Thread</a></h3>

@if (topics == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <tr>
            <th>Title</th>
            <th>Content</th>
            <th>User</th>
            <th>Votes</th>
            <th>Date</th>
        </tr>
        @foreach (var topic in topics.Take(50)) //kun 50 første hits
        {
            <tr>
                <td>@topic.Title</td>
                @if (@topic.Description.ToString().Contains("www.") || @topic.Description.ToString().Contains("https:") || @topic.Description.ToString().Contains("http:"))
                {
                    <td><a href="@topic.Description">@topic.Description</a></td>
                }
                else
                {
                    <td>@topic.Description</td>
                }
                <td>@topic.User</td>
                <td>@topic.Votes<span style="float: right;">
                        @*span style så knappen rykkes til højre*@
                        <button id="up_@topic.TopicID" @onclick="() => UpvoteTopic((int)topic.TopicID)">Upvote</button>
                        <button id="dwn_@topic.TopicID" @onclick="() => DownvoteTopic((int)topic.TopicID)">Downvote</button>
                    </span>
                </td>
                <td>@topic.Date</td>
                <td><button @onclick="() => TopicClicked((int)topic.TopicID)">Load Comments</button></td>
            </tr>
        }
    </table>
    <br />

    @if (comments != null)
    {
        <div class="comment-section">
            @foreach (var comment in comments)
            {
                <div class="comment">
                    <div class="comment-votes">
                        <span>
                            @comment.Votes
                            <button id="cup_@comment.CommentID" @onclick="() => UpvoteComment((int)clickedTopicTitle, (int)comment.CommentID)">Upvote</button>
                            <button id="cdwn_@comment.CommentID" @onclick="() => DownvoteComment((int)clickedTopicTitle, (int)comment.CommentID)">Downvote</button>
                        </span>
                    </div>
                    <div class="comment-content">
                        <p>@comment.Description</p>
                        <p class="comment-user"><a href="">@comment.User</a></p>
                        <p class="comment-date">@comment.Date</p>
                    </div>

                </div>
            }
        </div>
    }
}

@code {
    private Topic[]? topics;
    //private Post? votePost;

    private Comment[]? comments;

    private long clickedTopicTitle;

    private long clickedcommentid = 0;
    //gemmer navnet for at vise det under comments

    protected override async Task OnInitializedAsync()
    {
        topics = await apiService.GetTopics();
    }

    private async Task LoadComments(int topicId)
    {
        if (comments != null)
        {
            // Comments are already loaded, clear them
            ClearComments();
        }
        else
        {
            // Comments are not loaded, load them
            comments = await apiService.GetComments(topicId);
        }
        StateHasChanged(); // Request UI update
    }



    private async Task ClearComments()
    {
        comments = null;
    }


    private async void TopicClicked(int topicId)
    {
        var clickedTopic = topics.FirstOrDefault(t => t.TopicID == topicId);
        if (clickedTopic != null)
        {
            clickedTopicTitle = clickedTopic.TopicID;
            await LoadComments(topicId);
        }
    }
    //Tilføjet clickedTopic for at hente topics af det topic man trykker på, og derefter sætte clickedTopicTitle's værdi

    private async void UpvoteTopic(int id)
    {
        var updatedPost = await apiService.UpvoteTopic(id);

        topics = await apiService.GetTopics();
        await JSRuntime.InvokeVoidAsync("toggleButtonsTopic", id); //kører JS funktionen togglebuttons

        StateHasChanged();
    }

    private async void DownvoteTopic(int id)
    {
        var updatedDownPost = await apiService.DownvoteTopic(id);
        await JSRuntime.InvokeVoidAsync("toggleButtonsTopic", id); //kører JS funktionen togglebuttons

        topics = await apiService.GetTopics();

        StateHasChanged();
    }

    private async void UpvoteComment(int id, int topicid)
    {
        var updatedPost = await apiService.UpvoteComment(id, topicid);

        await JSRuntime.InvokeVoidAsync("toggleButtonsComment", topicid); //kører JS funktionen togglebuttons

        comments = await apiService.GetComments(id);

        StateHasChanged();
    }

    private async void DownvoteComment(int id, int topicid)
    {
        var updatedDownPost = await apiService.DownvoteComment(id, topicid);

        await JSRuntime.InvokeVoidAsync("toggleButtonsComment", topicid); //kører JS funktionen togglebuttons

        comments = await apiService.GetComments(id);

        StateHasChanged();
    }
}
